generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subscriber {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
  phone    Int
}

enum Role {
  ATHLETE
  COACH
  MENTOR
}

enum Blood {
  A_positive
  B_positive
  O
}

enum Religion {
  Hindu
  Muslim
}

enum Sport {
  Akaido
  Karate
}

enum Gender {
  Male
  Femal
  Other
}

enum Level {
  District
  State
  National
}

enum Event {
  Single
  League
  Tournament
  Knockout
}

// ***** ***** END OF ENUM ***** *****
// Mani Users or Entities

model User {
  id               String             @id @default(uuid())
  firstName        String
  lastName         String
  phone            Int                @unique
  email            String             @unique
  DOB              DateTime
  sport            Sport
  photo            String[]
  gender           Gender
  religion         Religion
  BloodGroup       Blood
  password         String
  type             Role
  otherInformation OtherInformation?
  address          User_address[]
  education        Education[]
  playingCareer    PlayingCareer[]
  achivement       Achivement[]
  fee              Fee?
  bankAccount      BankAccountDetail?
}

model Institute {
  id String @id @default(uuid())
  // include the basic info fields here it self
}

// other information of athlete/coach
enum Skill {
  Time_Management
}

enum Language {
  Hindi
  English
  Assames
}

model OtherInformation {
  id       Int        @id @default(autoincrement())
  bio      String
  skill    Skill[]
  language Language[]
  user     User       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id  String     @unique
}

// ***** Addresses *****

enum AddressType {
  Current
  Previous
  Birth
}

// temporery address table

model User_address {
  address_type AddressType
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  address      Addresses   @relation(fields: [address_id], references: [address_id])
  address_id   String

  @@unique([userId, address_id, address_type])
}

model Addresses {
  address_id   String         @id @default(uuid())
  // address_type AddressType
  addressLine  String
  city         String
  district     String
  state        String
  pincode      Int
  country      String
  user_address User_address[]
}

// ***** END OF ADDRESS *****
model Education {
  education_id String   @id @default(uuid())
  institute    String
  degree       String
  fieldOfStudy String
  start_date   DateTime
  end_date     DateTime
  Grade        String
  student      User     @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId    String
}

// // ***** PLAYING DETAILS *****

enum Career {
  Current
  Previous
}

// temporary table for playing career
model PlayingCareer {
  user          User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id       String
  playedFor     PlayedFor @relation(fields: [played_for_id], references: [id])
  played_for_id String
  highest_level Level
  careerType    Career

  @@unique([user_id, played_for_id, careerType])
}

model PlayedFor {
  id            String          @id @default(uuid())
  played_for    String
  level         Level
  played_from   DateTime
  played_to     DateTime
  playingCareer PlayingCareer[]
}

// model previousGame {

// }

model Achivement {
  achivement_id String   @id @default(uuid())
  name_of_event String
  event         Event
  level         Level
  position      Int
  organised_by  String
  event_date    DateTime
  player        User     @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  player_id     String   @unique
}

// model Certification {

// }

// // *** Only for Athletes ****
// model CurrentPlay {   

// }

// model Participation {

// }

// // ***** COACHING DETAILS ( Only for Coaches ) *****
// model CoachingCareer {

// }

// model previousCoaching {

// }

// model CurrentCoaching {

// }

// // ***** END *****

// Fee of mentor and coach

model Fee {
  fee              User     @relation(fields: [fee_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fee_id           String   @unique
  coaching_level   Level
  fee_type         String
  numer_of_classes Int
  duration         DateTime
}

model BankAccountDetail {
  account_holder String
  account_number Int
  bank_name      String
  branch_name    String
  IFSC_code      String
  userId         String @unique
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// // ***** ***** END OF BASIC INFO  OF ATHLETES/COACHES ***** *****

// // Information on training institutes/clubs

// // Venue Booking

// // Event Booking
